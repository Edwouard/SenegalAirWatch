# ============================================================================
# TEMPLATE DE CONFIGURATION ENVIRONNEMENT - DakarAirWatch
# ============================================================================
# 
# Copiez ce fichier vers '.env' et remplissez vos valeurs personnelles.
# Le fichier .env ne sera jamais commité dans Git (protection dans .gitignore)
#
# Instructions :
# 1. cp .env.template .env
# 2. Remplacez les valeurs par vos clés personnelles
# 3. Ne partagez JAMAIS votre fichier .env
#
# ============================================================================

# === CLÉS API PRINCIPALES ===
# Ces clés vous donnent accès aux données externes
# Priorité HAUTE - nécessaires pour le fonctionnement de base

# OpenAQ API Key - ESSENTIEL pour accéder aux données de pollution
# Obtenez la vôtre sur : https://explore.openaq.org/register
OPENAQ_API_KEY=your_openaq_api_key_here

# OpenWeatherMap API Key - pour les données météorologiques
# Gratuit jusqu'à 1000 appels/jour : https://openweathermap.org/api
OPENWEATHER_API_KEY=your_openweather_api_key_here

# === CONFIGURATION DES CHEMINS ===
# Personnalisez où vos données sont stockées
# Utile si vous travaillez avec un disque externe ou cloud

# Répertoire principal des données (par défaut : ./data)
DATA_DIR=./data

# Répertoire des sorties (graphiques, rapports) (par défaut : ./output)
OUTPUT_DIR=./output

# Répertoire des logs d'application (par défaut : ./logs)
LOGS_DIR=./logs

# Répertoire des modèles ML entraînés (par défaut : ./data/models)
MODEL_DIR=./data/models

# === CONFIGURATION DE DÉVELOPPEMENT ===
# Paramètres pour personnaliser votre environnement de travail

# Mode debug - active les logs détaillés et désactive certains caches
# Valeurs : True ou False
DEBUG=True

# Niveau de log - contrôle la verbosité des messages
# Valeurs : DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# === CONFIGURATION AVANCÉE (OPTIONNEL) ===
# Ces paramètres ne sont nécessaires que pour des usages spécifiques

# URL de base pour l'API CGQA (si accès futur)
# CGQA_API_ENDPOINT=https://api.cgqa.sn

# Configuration proxy si vous êtes derrière un firewall d'entreprise
# HTTP_PROXY=http://proxy.votre-universite.edu:8080
# HTTPS_PROXY=http://proxy.votre-universite.edu:8080

# === DÉPLOIEMENT HUGGINGFACE ===
# Variables spécifiques pour le déploiement en production

# Token HuggingFace pour publier votre Space
# Obtenez-le sur : https://huggingface.co/settings/tokens
# HF_TOKEN=your_huggingface_token_here

# Nom de votre Space HuggingFace
# HF_SPACE_NAME=your-username/dakarairwatch

# === EXEMPLES DE VALEURS POUR DÉVELOPPEMENT LOCAL ===
# Décommentez et adaptez ces lignes pour un setup rapide de développement

# Pour tests avec données limitées (économise votre quota API)
# API_RATE_LIMIT=100
# CACHE_ENABLED=True
# CACHE_MAX_AGE_HOURS=24

# Pour développement avec données d'exemple (ne nécessite pas de clés API)
# USE_SAMPLE_DATA=True
# SAMPLE_DATA_ONLY=True

# === NOTES IMPORTANTES ===
#
# 1. SÉCURITÉ : Ne commitez JAMAIS votre fichier .env dans Git
#    Il contient vos clés secrètes personnelles
#
# 2. ÉQUIPE : Chaque membre a son propre .env avec ses propres clés
#    Cela évite les conflits et protège les quotas individuels
#
# 3. DÉPLOIEMENT : Sur HuggingFace, définissez ces variables dans
#    l'interface web sous "Settings" > "Variables and secrets"
#
# 4. DÉVELOPPEMENT : Vous pouvez avoir plusieurs fichiers .env :
#    - .env.development (pour le dev local)
#    - .env.testing (pour les tests)
#    - .env.production (pour la production)
#    Spécifiez lequel utiliser avec : python -m dotenv -f .env.testing
#
# 5. VALEURS PAR DÉFAUT : L'application fonctionne même sans .env
#    grâce aux valeurs par défaut dans config.py
#
# ============================================================================